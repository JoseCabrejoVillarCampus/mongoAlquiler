import { ObjectId } from "mongodb";

use("db_campus_alquiler");
db.createCollection("sucursal", {
    capped: true,
    size: 1900,
    max: 5,
    validator: {
    $jsonSchema: {
        bsonType: "object",
        additionalProperties: false,
        required: [ "ID_Sucursal", "Nombre", "Direccion", "Telefono"],
        properties: {
            _id:{
                bsonType: 'objectId',
            },
            ID_Sucursal: {
                bsonType: "int",
                minimum: 0,
                maximum: 20,
                description: "El campo branchID debe ser un número y estar comprendido entre 0 y 20",
            },
            Nombre: {
                bsonType: "string",
                pattern: "^[A-Za-z\\s]+$",
                description: "Debe informar el campo name y este debe ser un string",
            },
            Direccion: {
                bsonType: "string",
                pattern: "^[a-zA-Z0-9áéíóúÁÉÍÓÚñÑüÜ,.#@\\s-]+$",
                description: "Debe informar el campo address y este debe ser un string",
            },
            Telefono: {
                bsonType: "string",
                pattern: "^[a-zA-Z0-9áéíóúÁÉÍÓÚñÑüÜ,.#@\\s-]+$",
                description: "Debe informar el campo phoneNumber y este debe ser un string",
            },
        },
    },
    },
});
use("db_campus_alquiler");
db.sucursal.insertMany([
  {
    ID_Sucursal: 1,
    Nombre: "Bucaramanga",
    Direccion: "calle 15# 21",
    Telefono: "3127240173",
  },
  {
    ID_Sucursal: 2,
    Nombre: "Medellin",
    Direccion: "calle 143# 31",
    Telefono: "312753453",
  },
  {
    ID_Sucursal: 3,
    Nombre: "Sincelejo",
    Direccion: "carrera 1# 14",
    Telefono: "3123456754",
  },
  {
    ID_Sucursal: 4,
    Nombre: "Barranquilla",
    Direccion: "carrera 34 #11",
    Telefono: "312900909",
  }
]);
use("db_campus_alquiler");
db.createCollection("sucursal_automovil", {
    capped: true,
    size: 1900,
    max: 5,
    validator: {
    $jsonSchema: {
        bsonType: "object",
        additionalProperties: false,
        required: ["ID_Sucursal_id", "ID_Automovil_id", "Cantidad_Disponible"],
        properties: {
            _id:{
                bsonType: 'objectId',
            },
            ID_Sucursal_id: {
                bsonType: "int",
                minimum: 0,
                maximum: 20,
                description: "El campo ID_Sucursal_id debe ser un número y estar comprendido entre 0 y 20"
            },
            ID_Automovil_id: {
                bsonType: "int",
                minimum: 0,
                maximum: 20,
                description: "El campo ID_Automovil_id debe ser un número y estar comprendido entre 0 y 20"
            },
            Cantidad_Disponible: {
                bsonType: "int",
                minimum: 0,
                description: "El campo Cantidad_Disponible debe ser un número"
            }
        },
    },
    },
});
use("db_campus_alquiler");
db.sucursal_automovil.insertMany([{
        ID_Sucursal_id: 1,
        ID_Automovil_id: 1,
        Cantidad_Disponible: 10
    },
    {
        ID_Sucursal_id: 1,
        ID_Automovil_id: 2,
        Cantidad_Disponible: 21
    },
    {
        ID_Sucursal_id: 2,
        ID_Automovil_id: 2,
        Cantidad_Disponible: 110
    },
    {
        ID_Sucursal_id: 3,
        ID_Automovil_id: 3,
        Cantidad_Disponible: 21
    },
    {
        ID_Sucursal_id: 4,
        ID_Automovil_id: 4,
        Cantidad_Disponible: 30
    },
    {
        ID_Sucursal_id: 5,
        ID_Automovil_id: 5,
        Cantidad_Disponible: 13
    }
]);
use("db_campus_alquiler");
db.createCollection("reserva", {
    capped: true,
    size: 1900,
    max: 5,
    validator: {
    $jsonSchema: {
        bsonType: "object",
        additionalProperties: false,
        required: ["ID_Reserva", "ID_Cliente_id", "ID_Automovil_id", "Fecha_Reserva","Fecha_Inicio","Fecha_Fin","Estado"],
        properties: {
            _id:{
                bsonType: 'objectId',
            },
            ID_Reserva: {
                bsonType: "int",
                minimum: 0,
                maximum: 20,
                description: "El campo ID_Reserva debe ser un número y estar comprendido entre 0 y 20"
            },
            ID_Cliente_id: {
                bsonType: "int",
                minimum: 0,
                maximum: 20,
                description: "El campo ID_Cliente_id debe ser un número y estar comprendido entre 0 y 20"
            },
            ID_Automovil_id: {
                bsonType: "int",
                minimum: 0,
                maximum: 20,
                description: "El campo ID_Automovil_id debe ser un número y estar comprendido entre 0 y 20"
            },
            Fecha_Reserva: {
                bsonType: "date",
                description: "Debe informar el campo Fecha_Reserva y este debe ser un dato date",
            },
            Fecha_Inicio: {
                bsonType: "date",
                description: "Debe informar el campo Fecha_Inicio y este debe ser un dato date",
            },
            Fecha_Fin: {
                bsonType: "date",
                description: "Debe informar el campo Fecha_Fin y este debe ser un dato date",
            },
            Estado: {
                bsonType: "string",
                pattern: "^[A-Za-z\\s\\p{P}]+$",
                description: "Debe informar el campo Estado y este debe ser un string",
            }
        },
    },
    },
});
use("db_campus_alquiler");
db.reserva.insertMany([{
    ID_Reserva:1,
    ID_Cliente_id:1,
    ID_Automovil_id:1,
    Fecha_Reserva:new Date(2023,9,3),
    Fecha_Inicio:new Date(2023,9,11),
    Fecha_Fin:new Date(2023,9,13),
    Estado:"Apartado"
},
{
    ID_Reserva: 2,
    ID_Cliente_id: 2,
    ID_Automovil_id: 2,
    Fecha_Reserva:new Date (2023,10,3),
    Fecha_Inicio:new Date (2023,10,13),
    Fecha_Fin:new Date (2023,11,13),
    Estado: "Apartado"
},
{
    ID_Reserva: 3,
    ID_Cliente_id: 3,
    ID_Automovil_id: 3,
    Fecha_Reserva:new Date (2023,8,1),
    Fecha_Inicio:new Date (2023,8,2),
    Fecha_Fin:new Date (2023,8,10),
    Estado: "Apartado",
},
{
    ID_Reserva: 4,
    ID_Cliente_id: 4,
    ID_Automovil_id: 4,
    Fecha_Reserva:new Date (2023,7,20),
    Fecha_Inicio:new Date (2023,8,1),
    Fecha_Fin:new Date (2023,8,7),
    Estado: "Apartado",
},
{
    ID_Reserva: 5,
    ID_Cliente_id: 5,
    ID_Automovil_id: 5,
    Fecha_Reserva:new Date (2023,8,3),
    Fecha_Inicio:new Date (2023,8,11),
    Fecha_Fin:new Date (2023,8,12),
    Estado: "Cancelado",
}
]);
use("db_campus_alquiler");
db.createCollection("automovil", {
    capped: true,
    size: 1900,
    max: 5,
    validator: {
    $jsonSchema: {
        bsonType: "object",
        additionalProperties: false,
        required: ["ID_Automovil", "Marca", "Modelo", "Anio","Tipo","Capacidad","Precio_Diario"],
        properties: {
            _id:{
                bsonType: 'objectId',
            },
            ID_Automovil: {
                bsonType: "int",
                minimum: 0,
                maximum: 20,
                description: "El campo ID_Automovil debe ser un número y estar comprendido entre 0 y 20"
            },
            Marca: {
                bsonType: "string",
                pattern: "^[a-zA-Z0-9áéíóúÁÉÍÓÚñÑüÜ,.#@\\s-]+$",
                description: "Debe informar el campo Marca y este debe ser un string",
            },
            Modelo: {
                bsonType: "string",
                pattern: "^[a-zA-Z0-9áéíóúÁÉÍÓÚñÑüÜ,.#@\\s-]+$",
                description: "Debe informar el campo Modelo y este debe ser un string",
            },
            Anio: {
                bsonType: "int",
                maximum: 2024,
                description: "El campo Anio debe ser un número y ser maximo 2024"
            },
            Tipo: {
                bsonType: "string",
                pattern: "^[a-zA-Z0-9áéíóúÁÉÍÓÚñÑüÜ,.#@\\s-]+$",
                description: "Debe informar el campo Tipo y este debe ser un string",
            },
            Capacidad: {
                bsonType: "int",
                minimum:1,
                maximum: 8,
                description: "El campo Capacidad debe ser un número y ser maximo 8"
            },
            Precio_Diario: {
                bsonType: "double",
                description: "El campo Precio_Diario debe ser un número"
            }
        },
    },
    },
});
use("db_campus_alquiler");
db.automovil.insertMany([{
        ID_Automovil: 1,
        Marca: "Chevrolet",
        Modelo: "Captiva",
        Anio: 2020,
        Tipo: "suv",
        Capacidad: 7,
        Precio_Diario: Double(150000.00)
    },
    {
        ID_Automovil: 2,
        Marca: "Ford",
        Modelo: "Explorer",
        Anio: 2023,
        Tipo: "suv",
        Capacidad: 7,
        Precio_Diario: Double(350000.00)
    },
    {
        ID_Automovil: 3,
        Marca: "Logan",
        Modelo: "Renault",
        Anio: 2019,
        Tipo: "sedan",
        Capacidad: 5,
        Precio_Diario: Double(70000.00)
    },
    {
        ID_Automovil: 4,
        Marca: "Spark",
        Modelo: "Chevrolet",
        Anio: 2022,
        Tipo: "Hatshback",
        Capacidad: 5,
        Precio_Diario: Double(55000.00)
    },
    {
        ID_Automovil: 5,
        Marca: "Prado",
        Modelo: "Toyota",
        Anio: 2020,
        Tipo: "4X4",
        Capacidad: 7,
        Precio_Diario: Double(250000.00)
    }
]);
use("db_campus_alquiler");
db.createCollection("cliente", {
    capped: true,
    size: 1900,
    max: 5,
    validator: {
        $jsonSchema: {
            bsonType: "object",
            additionalProperties: false,
            required: ["ID_Cliente", "Nombre", "Apellido", "DNI", "Direccion", "Telefono", "Email"],
            properties: {
                _id:{
                    bsonType: 'objectId',
                },
                ID_Cliente: {
                    bsonType: "int",
                    minimum: 0,
                    maximum: 20,
                    description: "El campo ID_Cliente debe ser un número y estar comprendido entre 0 y 20"
                },
                Nombre: {
                    bsonType: "string",
                    pattern: "^[a-zA-Z\\s]+$",
                    description: "Debe informar el campo Nombre y este debe ser un string"
                },
                Apellido: {
                    bsonType: "string",
                    pattern: "^[a-zA-Z\\s]+$",
                    description: "Debe informar el campo Apellido y este debe ser un string"
                },
                DNI: {
                    bsonType: "object",
                    properties: {
                        "Cedula": {
                            bsonType: "string",
                            pattern: "^[0-9]+$",
                            description: "Debe informar el campo Cedula y este debe ser un string numérico"
                        },
                        "Pasaporte": {
                            bsonType: "string",
                            pattern: "^[0-9]+$",
                            description: "Debe informar el campo Pasaporte y este debe ser un string numérico"
                        },
                        "Cedula Extranjeria": {
                            bsonType: "string",
                            pattern: "^[0-9]+$",
                            description: "Debe informar el campo Cedula Extranjeria y este debe ser un string numérico"
                        }
                    },
                    description: "El campo DNI debe ser un objeto con campos válidos"
                },
                Direccion: {
                    bsonType: "string",
                    description: "Debe informar el campo Direccion y este debe ser un string"
                },
                Telefono: {
                    bsonType: "string",
                    pattern: "^[0-9]+$",
                    description: "Debe informar el campo Telefono y este debe ser un string numérico"
                },
                Email: {
                    bsonType: "string",
                    pattern: "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",
                    description: "Debe informar un campo Email válido"
                }
            }
        }
    }
});
use("db_campus_alquiler");
db.cliente.insertMany([{
        ID_Cliente: 1,
        Nombre: "Jose",
        Apellido: "Cabrejos",
        DNI: {
            "Cedula": "1098726726"
        },
        Direccion: "calle 3",
        Telefono: "312412414",
        Email: "cabre@hotmail.com"
    },
    {
        ID_Cliente: 2,
        Nombre: "David",
        Apellido: "Rueda",
        DNI: {
            "Cedula": "10987324246"
        },
        Direccion: "calle 4",
        Telefono: "312423314",
        Email: "david@hotmail.com"
    },
    {
        ID_Cliente: 3,
        Nombre: "Juan",
        Apellido: "Avila",
        DNI: {
            "Pasaporte": "1032423426"
        },
        Direccion: "calle 12",
        Telefono: "316346346",
        Email: "juan@hotmail.com"
    },
    {
        ID_Cliente: 4,
        Nombre: "Diego",
        Apellido: "Salas",
        DNI: {
            "Cedula Extranjeria": "104574745747"
        },
        Direccion: "calle 76",
        Telefono: "319482384",
        Email: "diego@hotmail.com"
    },
    {
        ID_Cliente: 5,
        Nombre: "Jhon",
        Apellido: "Hernandez",
        DNI: {
            "Pasaporte": "10453453536"
        },
        Direccion: "calle 12",
        Telefono: "3166767674",
        Email: "jhon@hotmail.com"
    }
]);
use("db_campus_alquiler");
db.createCollection("alquiler", {
    capped: true,
    size: 1900,
    max: 5,
    validator: {
    $jsonSchema: {
        bsonType: "object",
        additionalProperties: false,
        required: ["ID_Alquiler", "ID_Cliente_id", "ID_Automovil_id", "Fecha_Inicio","Fecha_Fin","Costo_Total","Estado"],
        properties: {
            _id:{
                bsonType: 'objectId',
            },
            ID_Alquiler: {
                bsonType: "int",
                minimum: 0,
                maximum: 20,
                description: "El campo ID_Alquiler debe ser un número y estar comprendido entre 0 y 20"
            },
            ID_Cliente_id: {
                bsonType: "int",
                minimum: 0,
                maximum: 20,
                description: "El campo ID_Cliente_id debe ser un número y estar comprendido entre 0 y 20"
            },
            ID_Automovil_id: {
                bsonType: "int",
                minimum: 0,
                maximum: 20,
                description: "El campo ID_Automovil_id debe ser un número y estar comprendido entre 0 y 20"
            },
            Fecha_Inicio: {
                bsonType: "date",
                description: "Debe informar el campo Fecha_Inicio y este debe ser un dato date",
            },
            Fecha_Fin: {
                bsonType: "date",
                description: "Debe informar el campo Fecha_Fin y este debe ser un dato date",
            },
            Costo_Total: {
                bsonType: "double",
                description: "El campo Costo_Total debe ser un número"
            },
            Estado: {
                bsonType: "string",
                pattern: "^[A-Za-z\\s\\p{P}]+$",
                description: "Debe informar el campo Estado y este debe ser un string",
            }
        },
    },
    },
});
use("db_campus_alquiler");
db.alquiler.insertMany([{
        ID_Alquiler: 1,
        ID_Cliente_id: 1,
        ID_Automovil_id: 1,
        Fecha_Inicio:new Date (2023,9,11),
        Fecha_Fin:new Date (2023,9,13),
        Costo_Total: Double(300000.00),
        Estado: "Disponible",
    },
    {
        ID_Alquiler: 2,
        ID_Cliente_id: 2,
        ID_Automovil_id: 2,
        Fecha_Inicio:new Date (2023,10,13),
        Fecha_Fin:new Date (2023,11,13),
        Costo_Total:Double (700000.00),
        Estado: "Activo"
    },
    {
        ID_Alquiler: 3,
        ID_Cliente_id: 3,
        ID_Automovil_id: 3,
        Fecha_Inicio:new Date (2023,8,2),
        Fecha_Fin:new Date (2023,8,10),
        Costo_Total:Double (560000.00),
        Estado: "Disponible",
    },
    {
        ID_Alquiler: 4,
        ID_Cliente_id: 4,
        ID_Automovil_id: 4,
        Fecha_Inicio:new Date (2023,8,1),
        Fecha_Fin:new Date (2023,8,7),
        Costo_Total:Double (330000.00),
        Estado: "Disponible",
    },
    {
        ID_Alquiler: 5,
        ID_Cliente_id: 5,
        ID_Automovil_id: 5,
        Fecha_Inicio:new Date (2023,8,11),
        Fecha_Fin:new Date (2023,8,12),
        Costo_Total:Double (250000.00),
        Estado: "Cancelado",
    }
]);
use("db_campus_alquiler");
db.createCollection("registro_devolucion", {
    capped: true,
    size: 1900,
    max: 5,
    validator: {
    $jsonSchema: {
        bsonType: "object",
        additionalProperties: false,
        required: ["ID_Registro", "ID_Alquiler_id", "ID_Empleado_id", "Fecha_Devolucion","Combustible_Devuelto","Kilometraje_Devuelto","Monto_Adicional"],
        properties: {
            _id:{
                bsonType: 'objectId',
            },
            ID_Registro: {
                bsonType: "int",
                minimum: 0,
                maximum: 20,
                description: "El campo ID_Registro debe ser un número y estar comprendido entre 0 y 20"
            },
            ID_Alquiler_id: {
                bsonType: "int",
                minimum: 0,
                maximum: 20,
                description: "El campo ID_Alquiler_id debe ser un número y estar comprendido entre 0 y 20"
            },
            ID_Empleado_id: {
                bsonType: "int",
                minimum: 0,
                maximum: 20,
                description: "El campo ID_Empleado_id debe ser un número y estar comprendido entre 0 y 20"
            },
            Fecha_Devolucion: {
                bsonType: "date",
                description: "Debe informar el campo Fecha_Devolucion y este debe ser un string",
            },
            Combustible_Devuelto: {
                bsonType: "double",
                description: "El campo Combustible_Devuelto debe ser un número"
            },
            Kilometraje_Devuelto: {
                bsonType: "double",
                description: "El campo Kilometraje_Devuelto debe ser un número"
            },
            Monto_Adicional: {
                bsonType: "double",
                description: "El campo Monto_Adicional debe ser un número"
            }
        },
    },
    },
});
use("db_campus_alquiler");
db.registro_devolucion.insertMany([{
        ID_Registro: 1,
        ID_Alquiler_id: 1,
        ID_Empleado_id: 1,
        Fecha_Devolucion:new Date (2023,9,13),
        Combustible_Devuelto:Double (4.5),
        Kilometraje_Devuelto:Double (30000),
        Monto_Adicional:Double (10000.00)
    },
    {
        ID_Registro: 2,
        ID_Alquiler_id: 2,
        ID_Empleado_id: 2,
        Fecha_Devolucion:new Date (2023,11,13),
        Combustible_Devuelto:Double (3.5),
        Kilometraje_Devuelto:Double (37000),
        Monto_Adicional:Double (20000.00)
    },
    {
        ID_Registro: 3,
        ID_Alquiler_id: 3,
        ID_Empleado_id: 3,
        Fecha_Devolucion:new Date (2023,8,20),
        Combustible_Devuelto:Double (5.5),
        Kilometraje_Devuelto:Double (100000),
        Monto_Adicional:Double (600000.00)
    },
    {
        ID_Registro: 4,
        ID_Alquiler_id: 4,
        ID_Empleado_id: 4,
        Fecha_Devolucion:new Date (2023,9,13),
        Combustible_Devuelto:Double (8),
        Kilometraje_Devuelto:Double (40000),
        Monto_Adicional:Double (10000.00)
    }
]);
use("db_campus_alquiler");
db.createCollection("registro_entrega", {
    capped: true,
    size: 1900,
    max: 5,
    validator: {
    $jsonSchema: {
        bsonType: "object",
        additionalProperties: false,
        required: ["ID_Registro", "ID_Alquiler_id", "ID_Empleado_id", "Fecha_Entrega","Combustible_Entregado","Kilometraje_Entregado"],
        properties: {
            _id:{
                bsonType: 'objectId',
            },
            ID_Registro: {
                bsonType: "int",
                minimum: 0,
                maximum: 20,
                description: "El campo ID_Registro debe ser un número y estar comprendido entre 0 y 20"
            },
            ID_Alquiler_id: {
                bsonType: "int",
                minimum: 0,
                maximum: 20,
                description: "El campo ID_Alquiler_id debe ser un número y estar comprendido entre 0 y 20"
            },
            ID_Empleado_id: {
                bsonType: "int",
                minimum: 0,
                maximum: 20,
                description: "El campo ID_Empleado_id debe ser un número y estar comprendido entre 0 y 20"
            },
            Fecha_Entrega: {
                bsonType: "date",
                description: "Debe informar el campo Fecha_Devolucion y este debe ser un string",
            },
            Combustible_Entregado: {
                bsonType: "double",
                description: "El campo Combustible_Devuelto debe ser un número"
            },
            Kilometraje_Entregado: {
                bsonType: "double",
                description: "El campo Kilometraje_Devuelto debe ser un número"
            }
        },
    },
    },
});
use("db_campus_alquiler");
db.registro_entrega.insertMany([{
        ID_Registro: 1,
        ID_Alquiler_id: 1,
        ID_Empleado_id: 1,
        Fecha_Entrega:new Date (2023,10,13),
        Combustible_Entregado:Double (4),
        Kilometraje_Entregado:Double (25000),
    },
    {
        ID_Registro: 2,
        ID_Alquiler_id: 2,
        ID_Empleado_id: 2,
        Fecha_Entrega:new Date (2023,8,2),
        Combustible_Entregado:Double (4.5),
        Kilometraje_Entregado:Double (27000),
    },
    {
        ID_Registro: 3,
        ID_Alquiler_id: 3,
        ID_Empleado_id: 3,
        Fecha_Entrega:new Date (2023,8,1),
        Combustible_Entregado:Double (90000),
        Kilometraje_Entregado:Double (4),
    },
    {
        ID_Registro: 4,
        ID_Alquiler_id: 4,
        ID_Empleado_id: 4,
        Fecha_Entrega:new Date (2023,8,11),
        Combustible_Entregado:Double (8),
        Kilometraje_Entregado:Double (38000),
    }
]);
use("db_campus_alquiler");
db.createCollection("empleado", {
    capped: true,
    size: 1900,
    max: 5,
    validator: {
    $jsonSchema: {
        bsonType: "object",
        additionalProperties: false,
        required: ["ID_Empleado", "Nombre", "Apellido", "DNI", "Direccion", "Telefono", "Cargo"],
        properties: {
            _id:{
                bsonType: 'objectId',
            },
            ID_Empleado: {
                bsonType: "int",
                minimum: 0,
                maximum: 20,
                description: "El campo ID_Empleado debe ser un número y estar comprendido entre 0 y 20",
            },
            Nombre: {
                bsonType: "string",
                pattern: "^[A-Za-z\\s]+$",
                description: "Debe informar el campo Nombre y este debe ser un string",
            },
            Apellido: {
                bsonType: "string",
                pattern: "^[A-Za-z\\s]+$",
                description: "Debe informar el campo Apellido y este debe ser un string",
            },
            DNI: {
                bsonType: "string",
                pattern: "^[a-zA-Z0-9áéíóúÁÉÍÓÚñÑüÜ,.#@\\s-]+$",
                description: "Debe informar el campo DNI y este debe ser un string",
            },
            Direccion: {
                bsonType: "string",
                pattern: "^[a-zA-Z0-9áéíóúÁÉÍÓÚñÑüÜ,.#@\\s-]+$",
                description: "Debe informar el campo direccion y este debe ser un string",
            },
            Telefono: {
                bsonType: "string",
                pattern: "^[a-zA-Z0-9áéíóúÁÉÍÓÚñÑüÜ,.#@\\s-]+$",
                description: "Debe informar el campo telefono y este debe ser un string",
            },
            Cargo: {
                bsonType: "string",
                description: "Debe informar el campo Cargo y este debe ser un string",
            },
        },
    },
    },
});
use("db_campus_alquiler");
db.empleado.insertMany([{
        ID_Empleado: 1,
        Nombre: "Saul",
        Apellido: "Villar",
        DNI: "102837387383",
        Direccion: "carrera 12",
        Telefono: "32122343",
        Cargo: "Gerente"
    },
    {
        ID_Empleado: 2,
        Nombre: "Carlos",
        Apellido: "Cabrejo",
        DNI: "1343434343",
        Direccion: "carrera 2",
        Telefono: "334122343",
        Cargo: "Vendedor"
    },
    {
        ID_Empleado: 3,
        Nombre: "Santiago",
        Apellido: "Lopez",
        DNI: "1093939933",
        Direccion: "carrera 32",
        Telefono: "310938383",
        Cargo: "Vendedor"
    },
    {
        ID_Empleado: 4,
        Nombre: "Miguel",
        Apellido: "Lopo",
        DNI: "1341342424",
        Direccion: "carrera 443",
        Telefono: "393939393",
        Cargo: "Administrador",
    },
    {
        ID_Empleado: 5,
        Nombre: "Laura",
        Apellido: "Hernandez",
        DNI: "102983922",
        Direccion: "carrera 23",
        Telefono: "322232333",
        Cargo: "Asistente",
    }
]);

//? Consultas //

//? 1 Recursos: Sql, DTO, JWT//

//? 2 Mostrar todos los clientes registrados en la base de datos//

use("db_campus_alquiler");
db.cliente.find()
use("db_campus_alquiler");
db.cliente.aggregate([
    {
    $project: {
        "_id":0,
        "client": "$ID_Cliente",
        "name": "$Nombre",
        "surname":"$Apellido",
        "DNI":"$identificacion",
        "address": "$Direccion",
        "phonenumber": "$Telefono",
        "emailAddress": "$Email",
        }
    }
]);
use("db_campus_alquiler");
db.cliente.aggregate([
    {
        $match: { "ID_Cliente": 2 }
    },
    {
        $project: {
            "_id": 0,
            "client": "$ID_Cliente",
            "name": "$Nombre",
            "surname": "$Apellido",
            "DNI": "$DNI",
            "address": "$Direccion",
            "phonenumber": "$Telefono",
            "emailAddress": "$Email"
        }
    }
])

//? 3 Obtener todos los automóviles disponibles para alquiler//

use("db_campus_alquiler");
db.alquiler.find({
    Estado: "Disponible"
});


//? 4 Listar todos los alquileres activos junto con los datos de los clientes relacionados//
//! en este caso usamos "En Prestamo"  //
use("db_campus_alquiler");
db.getCollection("cliente").aggregate([{
        $lookup: {
            from: "alquiler",
            localField: "ID_Cliente",
            foreignField: "ID_Cliente_id",
            as: "alquiler_FK",
        }
    },
    {
        $project: {
            "alquiler_FK._id": 0,
            "alquiler_FK.ID_Cliente_id": 0,
            "alquiler_FK.ID_Automovil_id": 0,
            "alquiler_FK.Costo_Total": 0,
        }
    },
    {
        $unwind: "$alquiler_FK"
    },
    {
        $match: {
            "alquiler_FK.Estado": {
                $eq: "En Prestamo"
            }
        }
    },
    {
        $group: {
            _id: "$_id",
            ID_Cliente: {
                $first: "$ID_Cliente"
            },
            Nombre: {
                $first: "$Nombre"
            },
            Apellido: {
                $first: "$Apellido"
            },
            DNI: {
                $first: "$DNI"
            },
            Direccion: {
                $first: "$Direccion"
            },
            Telefono: {
                $first: "$Telefono"
            },
            Email: {
                $first: "$Email"
            },
            alquiler_FK: {
                $push: "$alquiler_FK"
            }
        }
    }
]);

//? 5 Mostrar todas las reservas pendientes con los datos del cliente y el automóvil reservado.//

use("db_campus_alquiler");
db.getCollection("cliente").aggregate([{
        $lookup: {
            from: "alquiler",
            localField: "ID_Cliente",
            foreignField: "ID_Cliente_id",
            as: "alquiler_FK",
        }
    },
    {
        $project: {
            "alquiler_FK._id": 0,
            "alquiler_FK.ID_Cliente_id": 0,
            "alquiler_FK.Costo_Total": 0,
            "alquiler_FK.Fecha_Inicio": 0,
            "alquiler_FK.Fecha_Fin": 0,
        }
    },
    {
        $unwind: "$alquiler_FK"
    },
    {
        $lookup: {
            from: "automovil",
            localField: "alquiler_FK.ID_Automovil_id",
            foreignField: "_id",
            as: "automovil_FK",
        }
    },
    {
        $project: {
            "automovil_FK._id": 0,
            "automovil_FK.ID_Automovil": 0,
            "automovil_FK._id": 0,
            "automovil_FK.Precio_Diario": 0
        }
    },
    {
        $match: {
            "alquiler_FK.Estado": {
                $eq: "Disponible"
            }
        }
    },
    {
        $group: {
            _id: "$_id",
            ID_Cliente: {
                $first: "$ID_Cliente"
            },
            Nombre: {
                $first: "$Nombre"
            },
            Apellido: {
                $first: "$Apellido"
            },
            DNI: {
                $first: "$DNI"
            },
            Direccion: {
                $first: "$Direccion"
            },
            Telefono: {
                $first: "$Telefono"
            },
            Email: {
                $first: "$Email"
            },
            alquiler_FK: {
                $push: "$alquiler_FK"
            },
            automovil_FK: {
                $push: "$automovil_FK"
            }
        }
    }
]);
use("db_campus_alquiler");
db.reserva.aggregate([{
    $lookup: {
        from: "automovil",
        localField: "ID_Automovil_id",
        foreignField: "_id",
        as: "fk"
    }
}]);

//? 6 Obtener los detalles del alquiler con el ID_Alquiler específico.//

use("db_campus_alquiler");
db.alquiler.find({
            ID_Alquiler: 1
    },
);

//? 7 Listar los empleados con el cargo de "Vendedor"//

use("db_campus_alquiler");
db.empleado.find({
    Cargo: "Vendedor"
})

//? 8 Mostrar la cantidad total de automóviles disponibles en cada sucursal.//
use("db_campus_alquiler");
db.sucursal_automovil.find();
use("db_campus_alquiler");
db.getCollection("sucursal_automovil").aggregate([{
        $lookup: {
            from: "sucursal",
            localField: "ID_Sucursal_id",
            foreignField: "ID_Sucursal",
            as: "sucursal_FK"
        }
    },
    {
        $unwind: "$sucursal_FK"
    },
    {
        $project: {
            "ID_Automovil_id": 0,
            "sucursal_FK._id": 0,
            "sucursal_FK.ID_Sucursal": 0,
            "sucursal_FK.Telefono": 0,
            "sucursal_FK.Direccion": 0
        }
    },
    {
        $group: {
            _id: "$_id",
            Cantidad_Disponible: {
                $first: "$Cantidad_Disponible"
            },
            sucursal_FK: {
                $push: "$sucursal_FK"
            }
        }
    }
]);
use("db_campus_alquiler");
db.getCollection("sucursal_automovil").aggregate([{
        $lookup: {
            from: "sucursal",
            localField: "ID_Sucursal_id",
            foreignField: "_id",
            as: "sucursal_FK"
        },
    },
    {
        $unwind: "$sucursal_FK"
    },
    {
        $project: {
            "ID_Automovil_id": 0,
            "sucursal_FK._id": 0,
            "sucursal_FK.ID_Sucursal": 0,
            "sucursal_FK.Telefono": 0,
            "sucursal_FK.Direccion": 0
        }
    },
    {
        $group: {
            _id: "$sucursal_FK.Nombre",
            Cantidad_Disponible: {
                $sum: "$Cantidad_Disponible"
            }
        }
    }
]);
use("db_campus_alquiler");
db.getCollection("sucursal_automovil").aggregate([
    {
        $lookup: {
          from: "sucursal",
          localField: "ID_Sucursal_id",
          foreignField: "ID_Sucursal",
          as: "Total"
        }
    },
    
    {$unwind: "$Total" },
    {
        $group: {
          _id: "$Total.ID_Sucursal",
          sucursal: {$first: "$Total.Nombre"},
          totalAutos: {
            $sum: "$Cantidad_Disponible"
          }
        }
    }
]);

//? 9 Obtener el costo total de un alquiler específico.//

use("db_campus_alquiler");
db.alquiler.aggregate([{
        $match: {
            _id: 3
        }
    },
    {
        $lookup: {
            from: "cliente",
            localField: "ID_Cliente_id",
            foreignField: "ID_Cliente",
            as: "cliente_FK"
        }
    },
    {
        $unwind: "$cliente_FK"
    },
    {
        $lookup: {
            from: "automovil",
            localField: "ID_Automovil_id",
            foreignField: "_id",
            as: "automovil_FK"
        }
    },
    {
        $unwind: "$automovil_FK"
    },
    {
        $project: {
            "cliente_FK._id": 0,
            "automovil_FK._id": 0
        }
    },
    {
        $group: {
            _id: "$_id",
            Costo_Total: {
                $first: "$Costo_Total"
            }
        }
    },
    {
        $project: {
            _id: 1,
            Costo_Total: 1
        }
    }
]);
use("db_campus_alquiler");
db.getCollection("alquiler").aggregate([
    {
        $project: {
          _id: 0,
          ID_Automovil_id: 0,
          Fecha_Inicio:0,
          Fecha_Fin: 0,
          Estado: 0
        }
    },
    {
        $match: {
            "ID_Alquiler": {$eq: 2}
        }
    }
]);

//? 10 Listar los clientes con el DNI específico//

use("db_campus_alquiler");
db.cliente.aggregate([{
    $match: {
        "DNI.Cedula": {
            $exists: true
        }
    }
}]);

//? 11 Mostrar todos los automóviles con una capacidad mayor a 5 personas//

use("db_campus_alquiler");
db.automovil.find({
    Capacidad: {
        $gt: 5
    }
})

//! 12 Obtener los detalles del alquiler que tiene fecha de inicio en '2023-07-05'.//

use("db_campus_alquiler");
db.alquiler.aggregate([{
        $match: {
            Fecha_Inicio: "2023-07-10"
        }
    },
    {
        $lookup: {
            from: "cliente",
            localField: "ID_Cliente_id",
            foreignField: "_id",
            as: "cliente_FK"
        }
    },
    {
        $unwind: "$cliente_FK"
    },
    {
        $lookup: {
            from: "automovil",
            localField: "ID_Automovil_id",
            foreignField: "_id",
            as: "automovil_FK"
        }
    },
    {
        $unwind: "$automovil_FK"
    },
    {
        $project: {
            "cliente_FK._id": 0,
            "automovil_FK._id": 0
        }
    },
    {
        $group: {
            _id: "$_id",
            ID_Alquiler: {
                $first: "$ID_Alquiler"
            },
            ID_Cliente_id: {
                $first: "$ID_Cliente_id"
            },
            ID_Automovil_id: {
                $first: "$ID_Automovil_id"
            },
            Fecha_Inicio: {
                $first: "$Fecha_Inicio"
            },
            Fecha_Fin: {
                $first: "$Fecha_Fin"
            },
            Costo_Total: {
                $first: "$Costo_Total"
            },
            Estado: {
                $first: "$Estado"
            },
            cliente_FK: {
                $push: "$cliente_FK"
            },
            automovil_FK: {
                $push: "$automovil_FK"
            }
        }
    }
]);
use("db_campus_alquiler");
db.reserva.find();
use("db_campus_alquiler");
db.getCollection("alquiler").aggregate(
    {
        $match: {
            "Fecha_Inicio": {$eq:"2023-07-10"}
        }
    }
);
use("db_campus_alquiler");
db.alquiler.find({Fecha_Inicio:"2023-07-10"});

//? 13 Listar las reservas pendientes realizadas por un cliente específico//

use("db_campus_alquiler");
db.reserva.aggregate([{
        $match: {
            ID_Cliente_id: 1
        }
    },
    {
        $lookup: {
            from: "cliente",
            localField: "ID_Cliente_id",
            foreignField: "ID_Cliente",
            as: "cliente_FK"
        }
    },
    {
        $unwind: "$cliente_FK"
    },
    {
        $project: {
            "cliente_FK._id": 0,
        }
    },
    {
        $match: {
            Estado: "Apartado"
        }
    },
    {
        $group: {
            _id: "$_id",
            ID_Reserva: {
                $first: "$ID_Reserva"
            },
            Estado: {
                $first: "$Estado"
            },
            cliente_FK: {
                $push: "$cliente_FK"
            },
        }
    }
]);


//? 14 Mostrar los empleados con cargo de "Gerente" o "Asistente"//

use("db_campus_alquiler");
db.empleado.find({
    $or: [{
        Cargo: "Gerente"
    }, {
        Cargo: "Asistente"
    }]
});

//? 15 Obtener los datos de los clientes que realizaron al menos un alquiler//

use("db_campus_alquiler");
db.registro_devolucion.aggregate([{
        $lookup: {
            from: "alquiler",
            localField: "ID_Alquiler_id",
            foreignField: "ID_Alquiler",
            as: "alquiler_FK",
        }
    },
    {
        $unwind: "$alquiler_FK"
    },
    {
        $lookup: {
            from: "cliente",
            localField: "alquiler_FK.ID_Cliente_id",
            foreignField: "_id",
            as: "cliente_FK",
        }
    },
    {
        $group: {
            _id: "$_id",
            ID_Registro: {
                $first: "$ID_Registro"
            },
            ID_Alquiler_id: {
                $first: "$ID_Alquiler_id"
            },
            ID_Empleado_id: {
                $first: "$ID_Empleado_id"
            },
            Fecha_Devolucion: {
                $first: "$Fecha_Devolucion"
            },
            Combustible_Devuelto: {
                $first: "$Combustible_Devuelto"
            },
            Kilometraje_Devuelto: {
                $first: "$Kilometraje_Devuelto"
            },
            Monto_Adicional: {
                $first: "$Monto_Adicional"
            },
            alquiler_FK: {
                $first: "$alquiler_FK"
            },
            cliente_FK: {
                $first: "$cliente_FK"
            }
        }
    }
]);

//? 16 Listar todos los automóviles ordenados por marca y modelo//

use("db_campus_alquiler");
db.automovil.aggregate([{
    $sort: {
        "Marca": 1,
        "Modelo": 1
    }
}]);
use("db_campus_alquiler");
db.automovil.aggregate([{
    $sort: {
        "Marca": 1
    }
}]);
use("db_campus_alquiler");
db.automovil.aggregate([{
    $sort: {
        "Modelo": 1
    }
}]);
use("db_campus_alquiler");
db.automovil.aggregate([{
    $sort: {
        "Anio": 1
    }
}]);

//? 17 Mostrar la cantidad total de automóviles en cada sucursal junto con su dirección//

use("db_campus_alquiler");
db.getCollection("sucursal_automovil").aggregate([{
        $lookup: {
            from: "sucursal",
            localField: "ID_Sucursal_id",
            foreignField: "ID_Sucursal",
            as: "sucursal_FK"
        }
    },
    {
        $unwind: "$sucursal_FK"
    },
    {
        $project: {
            "ID_Automovil_id": 0,
            "sucursal_FK._id": 0,
            "sucursal_FK.ID_Sucursal": 0,
            "sucursal_FK.Telefono": 0
        }
    },
    {
        $group: {
            _id: "$_id",
            Cantidad_Disponible: {
                $first: "$Cantidad_Disponible"
            },
            sucursal_FK: {
                $push: "$sucursal_FK"
            }
        }
    }
]);
use("db_campus_alquiler");
db.getCollection("sucursal_automovil").aggregate([{
        $lookup: {
            from: "sucursal",
            localField: "ID_Sucursal_id",
            foreignField: "ID_Sucursal",
            as: "sucursal_FK"
        },
    },
    {
        $unwind: "$sucursal_FK"
    },
    {
        $project: {
            "ID_Automovil_id": 0,
            "sucursal_FK._id": 0,
            "sucursal_FK.ID_Sucursal": 0,
            "sucursal_FK.Telefono": 0,
        }
    },
    {
        $group: {
            _id: "$sucursal_FK.Nombre",
            Cantidad_Disponible: {
                $sum: "$Cantidad_Disponible"
            },
            sucursal_FK: {
                $first: "$sucursal_FK"
            }
        }
    }
]);
//? 18 Obtener la cantidad total de alquileres registrados en la base de datos//

use("db_campus_alquiler");
db.alquiler.aggregate([
    {$count: 'ID_Alquiler'},
    {
        $project: {
            'Total de Alquileres' : '$ID_Alquiler'
        }
    }
]);

//? 19 Mostrar los automóviles con capacidad igual a 5 personas y que estén disponibles//

use("db_campus_alquiler");
db.automovil.aggregate([{
        $match: {
            Capacidad: 5
        }
    },
    {
        $lookup: {
            from: "alquiler",
            localField: "ID_Automovil",
            foreignField: "ID_Automovil_id",
            as: "alquileres_FK"
        }
    },
    {
        $project: {
            "_id": 0,
            "Precio_Diario": 0,
            "Anio": 0,
            "Tipo": 0
        }
    },
    {
        $match: {
            "alquileres_FK.Estado": "En Prestamo"
        }
    },
    {
        $project: {
            "alquileres_FK._id": 0,
            "alquileres_FK.ID_Alquiler": 0,
            "alquileres_FK.ID_Cliente_id": 0,
            "alquileres_FK.ID_Automovil_id": 0,
            "alquileres_FK.Fecha_Inicio": 0,
            "alquileres_FK.Fecha_Fin": 0,
            "alquileres_FK.Costo_Total": 0,
        }
    }
]);

//? 20 Obtener los datos del cliente que realizó la reserva con reserva_id especifico//

use("db_campus_alquiler");
db.reserva.aggregate([{
        $match: {
            ID_Reserva: 2
        }
    },
    {
        $lookup: {
            from: "cliente",
            localField: "ID_Cliente_id",
            foreignField: "ID_Cliente",
            as: "cliente_FK"
        }
    },
    {
        $project: {
            "ID_Automovil_id": 0,
            "Fecha_Reserva":0,
            "Fecha_Inicio":0,
            "Fecha_Fin":0
        }
    },
    {
        $group: {
            _id: "$_id",
            ID_Reserva: {
                $first: "$ID_Reserva"
            },
            ID_Cliente_id: {
                $first: "$ID_Cliente_id"
            },
            Estado: {
                $first: "$Estado"
            },
            cliente_FK: {
                $push: "$cliente_FK"
            },
        }
    },
    {
        $project: {
            "_id":0,
            "ID_Cliente_id":0,
            "cliente_FK._id": 0,
            "Fecha_Reserva":0
        }
    }
]);

//? 21 Listar los alquileres con fecha de inicio entre '2023-08-11' y '2023-09-11'//

use("db_campus_alquiler");
db.alquiler.find();

use("db_campus_alquiler");
db.alquiler.find({
    Fecha_Inicio: {
        $gte: ("2023-09-02T05:00:00Z"),
        $lte: ("2023-11-13T05:00:00Z")
    }
});